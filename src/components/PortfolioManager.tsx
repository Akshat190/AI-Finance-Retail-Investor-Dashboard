import React, { useState, useEffect } from "react";
import { Plus, Trash2, DollarSign, TrendingUp, Calendar, Filter, RefreshCw } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { supabase } from '../lib/supabase';
import { toast } from 'react-hot-toast';

// Investment types
type InvestmentType = 'stock' | 'mutual_fund' | 'fixed_deposit';

// Investment interface
interface Investment {
  id: string;
  type: InvestmentType;
  name: string;
  ticker?: string;
  quantity?: number;
  buyPrice: number;
  currentPrice?: number;
  expectedAnnualReturn: number;
  purchaseDate: string;
  maturityDate?: string; // For FDs
  interestRate?: number; // For FDs
}

const PortfolioManager: React.FC = () => {
  const { user } = useAuth();
  const [investments, setInvestments] = useState<Investment[]>([]);
  const [filteredInvestments, setFilteredInvestments] = useState<Investment[]>([]);
  const [filter, setFilter] = useState<InvestmentType | 'all'>('all');
  const [loading, setLoading] = useState(true);
  const [projectionYears, setProjectionYears] = useState(10);
  const [taxRate, setTaxRate] = useState(0.15); // 15% default tax rate
  const [inflationRate, setInflationRate] = useState(0.025); // 2.5% default inflation rate
  
  // New investment form state
  const [showAddForm, setShowAddForm] = useState(false);
  const [newInvestment, setNewInvestment] = useState<Partial<Investment>>({
    type: 'stock',
    name: '',
    ticker: '',
    quantity: 1,
    buyPrice: 0,
    currentPrice: 0,
    expectedAnnualReturn: 0.08, // 8% default
    purchaseDate: new Date().toISOString().split('T')[0],
    maturityDate: '',
    interestRate: 0
  });
  
  // Load investments from database (or use dummy data for now)
  useEffect(() => {
    const fetchInvestments = async () => {
      setLoading(true);
      
      try {
        // In a real app, you'd fetch from Supabase here
        // For now, let's use dummy data
        const dummyData: Investment[] = [
          {
            id: '1',
            type: 'stock',
            name: 'Apple Inc.',
            ticker: 'AAPL',
            quantity: 10,
            buyPrice: 150,
            currentPrice: 175,
            expectedAnnualReturn: 0.12,
            purchaseDate: '2022-01-15'
          },
          {
            id: '2',
            type: 'mutual_fund',
            name: 'Vanguard Total Stock Market Index Fund',
            ticker: 'VTSAX',
            quantity: 5,
            buyPrice: 100,
            currentPrice: 110,
            expectedAnnualReturn: 0.09,
            purchaseDate: '2021-06-20'
          },
          {
            id: '3',
            type: 'fixed_deposit',
            name: '5-Year Fixed Deposit',
            buyPrice: 10000,
            expectedAnnualReturn: 0.05,
            purchaseDate: '2023-01-10',
            maturityDate: '2028-01-10',
            interestRate: 0.05
          }
        ];
        
        setInvestments(dummyData);
        setFilteredInvestments(dummyData);
      } catch (error) {
        console.error('Error fetching investments:', error);
        toast.error('Failed to load investment data');
      } finally {
        setLoading(false);
      }
    };
    
    fetchInvestments();
  }, [user]);
  
  // Filter investments by type
  useEffect(() => {
    if (filter === 'all') {
      setFilteredInvestments(investments);
    } else {
      setFilteredInvestments(investments.filter(inv => inv.type === filter));
    }
  }, [filter, investments]);
  
  // Add new investment
  const handleAddInvestment = () => {
    if (!newInvestment.name || !newInvestment.buyPrice) {
      toast.error('Please fill in all required fields');
      return;
    }
    
    const investment: Investment = {
      id: Date.now().toString(), // In a real app, this would be generated by the database
      type: newInvestment.type as InvestmentType,
      name: newInvestment.name,
      ticker: newInvestment.ticker,
      quantity: newInvestment.quantity,
      buyPrice: newInvestment.buyPrice,
      currentPrice: newInvestment.currentPrice || newInvestment.buyPrice,
      expectedAnnualReturn: newInvestment.expectedAnnualReturn || 0.08,
      purchaseDate: newInvestment.purchaseDate || new Date().toISOString().split('T')[0],
      maturityDate: newInvestment.maturityDate,
      interestRate: newInvestment.interestRate
    };
    
    setInvestments([...investments, investment]);
    toast.success('Investment added successfully');
    
    // Reset form
    setNewInvestment({
      type: 'stock',
      name: '',
      ticker: '',
      quantity: 1,
      buyPrice: 0,
      currentPrice: 0,
      expectedAnnualReturn: 0.08,
      purchaseDate: new Date().toISOString().split('T')[0],
      maturityDate: '',
      interestRate: 0
    });
    setShowAddForm(false);
  };
  
  // Delete investment
  const handleDeleteInvestment = (id: string) => {
    setInvestments(investments.filter(inv => inv.id !== id));
    toast.success('Investment removed');
  };
  
  // Calculate current portfolio value
  const calculateCurrentValue = (): number => {
    return investments.reduce((total, inv) => {
      if (inv.type === 'stock' || inv.type === 'mutual_fund') {
        return total + ((inv.currentPrice || inv.buyPrice) * (inv.quantity || 1));
      }
      return total + inv.buyPrice;
    }, 0);
  };
  
  // Calculate initial investment value
  const calculateInitialValue = (): number => {
    return investments.reduce((total, inv) => {
      if (inv.type === 'stock' || inv.type === 'mutual_fund') {
        return total + (inv.buyPrice * (inv.quantity || 1));
      }
      return total + inv.buyPrice;
    }, 0);
  };
  
  // Calculate future value of an investment
  const calculateFutureValue = (investment: Investment, years: number): number => {
    const initialValue = investment.type === 'fixed_deposit' 
      ? investment.buyPrice 
      : investment.buyPrice * (investment.quantity || 1);
      
    // For FDs, if maturity date is before projection end, use interest rate until maturity
    if (investment.type === 'fixed_deposit' && investment.maturityDate) {
      const maturityDate = new Date(investment.maturityDate);
      const purchaseDate = new Date(investment.purchaseDate);
      const maturityYears = (maturityDate.getTime() - purchaseDate.getTime()) / (1000 * 60 * 60 * 24 * 365);
      
      if (maturityYears < years) {
        // Calculate value at maturity
        const valueAtMaturity = initialValue * Math.pow(1 + (investment.interestRate || 0), maturityYears);
        // Then grow at expected return rate for remaining years
        return valueAtMaturity * Math.pow(1 + investment.expectedAnnualReturn, years - maturityYears);
      }
    }
    
    // Standard compound growth
    return initialValue * Math.pow(1 + investment.expectedAnnualReturn, years);
  };
  
  // Calculate total future value
  const calculateTotalFutureValue = (): number => {
    return investments.reduce((total, inv) => {
      return total + calculateFutureValue(inv, projectionYears);
    }, 0);
  };
  
  // Calculate capital gains tax
  const calculateTax = (): number => {
    const futureValue = calculateTotalFutureValue();
    const initialValue = calculateInitialValue();
    const gain = Math.max(futureValue - initialValue, 0);
    return gain * taxRate;
  };
  
  // Calculate net future value after tax
  const calculateNetFutureValue = (): number => {
    return calculateTotalFutureValue() - calculateTax();
  };
  
  // Calculate real value after inflation
  const calculateRealValue = (): number => {
    const netFutureValue = calculateNetFutureValue();
    return netFutureValue / Math.pow(1 + inflationRate, projectionYears);
  };
  
  // Calculate total tax
  const calculateTotalTax = (): number => {
    return investments.reduce((total, inv) => {
      if (inv.type === 'stock' || inv.type === 'mutual_fund') {
        const gain = Math.max(calculateFutureValue(inv, projectionYears) - inv.buyPrice * (inv.quantity || 1), 0);
        return total + gain * taxRate;
      }
      return total;
    }, 0);
  };
  
  // Calculate total return
  const calculateTotalReturn = (): number => {
    const futureValue = calculateTotalFutureValue();
    const initialValue = calculateInitialValue();
    const gain = Math.max(futureValue - initialValue, 0);
    return (gain / initialValue) * 100;
  };
  
  // Calculate annualized return
  const calculateAnnualizedReturn = (): number => {
    const futureValue = calculateTotalFutureValue();
    const initialValue = calculateInitialValue();
    const gain = Math.max(futureValue - initialValue, 0);
    const years = projectionYears;
    return (Math.pow(futureValue / initialValue, 1 / years) - 1) * 100;
  };
  
  // Calculate tax efficiency
  const calculateTaxEfficiency = (): number => {
    const futureValue = calculateTotalFutureValue();
    const initialValue = calculateInitialValue();
    const gain = Math.max(futureValue - initialValue, 0);
    const tax = calculateTax();
    return (gain - tax) / gain * 100;
  };
  
  return (
    <div className="bg-white rounded-lg shadow-md p-6 max-w-6xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Investment Portfolio</h2>
        <button
          onClick={() => setShowAddForm(!showAddForm)}
          className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
        >
          <Plus className="h-5 w-5 mr-2" />
          Add Investment
        </button>
      </div>
      
      {/* Add Investment Form */}
      {showAddForm && (
        <div className="mb-8 p-4 border border-gray-200 rounded-lg bg-gray-50">
          <h3 className="text-lg font-medium mb-4">Add New Investment</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
              <select
                value={newInvestment.type}
                onChange={(e) => setNewInvestment({...newInvestment, type: e.target.value as InvestmentType})}
                className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              >
                <option value="stock">Stock</option>
                <option value="mutual_fund">Mutual Fund</option>
                <option value="fixed_deposit">Fixed Deposit</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
              <input
                type="text"
                value={newInvestment.name}
                onChange={(e) => setNewInvestment({...newInvestment, name: e.target.value})}
                className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Investment name"
              />
            </div>
            
            {(newInvestment.type === 'stock' || newInvestment.type === 'mutual_fund') && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Ticker Symbol</label>
                <input
                  type="text"
                  value={newInvestment.ticker}
                  onChange={(e) => setNewInvestment({...newInvestment, ticker: e.target.value})}
                  className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="e.g. AAPL"
                />
              </div>
            )}
            
            {(newInvestment.type === 'stock' || newInvestment.type === 'mutual_fund') && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                <input
                  type="number"
                  value={newInvestment.quantity}
                  onChange={(e) => setNewInvestment({...newInvestment, quantity: Number(e.target.value)})}
                  className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  min="0"
                  step="0.01"
                />
              </div>
            )}
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {newInvestment.type === 'fixed_deposit' ? 'Principal Amount ($)' : 'Buy Price ($)'}
              </label>
              <input
                type="number"
                value={newInvestment.buyPrice}
                onChange={(e) => setNewInvestment({...newInvestment, buyPrice: Number(e.target.value)})}
                className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                min="0"
                step="0.01"
              />
            </div>
            
            {(newInvestment.type === 'stock' || newInvestment.type === 'mutual_fund') && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Current Price ($)</label>
                <input
                  type="number"
                  value={newInvestment.currentPrice}
                  onChange={(e) => setNewInvestment({...newInvestment, currentPrice: Number(e.target.value)})}
                  className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  min="0"
                  step="0.01"
                />
              </div>
            )}
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Expected Annual Return (%)</label>
              <input
                type="number"
                value={newInvestment.expectedAnnualReturn ? newInvestment.expectedAnnualReturn * 100 : ''}
                onChange={(e) => setNewInvestment({...newInvestment, expectedAnnualReturn: Number(e.target.value) / 100})}
                className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                min="0"
                max="100"
                step="0.1"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Purchase Date</label>
              <input
                type="date"
                value={newInvestment.purchaseDate}
                onChange={(e) => setNewInvestment({...newInvestment, purchaseDate: e.target.value})}
                className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            {newInvestment.type === 'fixed_deposit' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Maturity Date</label>
                  <input
                    type="date"
                    value={newInvestment.maturityDate}
                    onChange={(e) => setNewInvestment({...newInvestment, maturityDate: e.target.value})}
                    className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Interest Rate (%)</label>
                  <input
                    type="number"
                    value={newInvestment.interestRate ? newInvestment.interestRate * 100 : ''}
                    onChange={(e) => setNewInvestment({...newInvestment, interestRate: Number(e.target.value) / 100})}
                    className="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                    min="0"
                    max="100"
                    step="0.1"
                  />
                </div>
              </>
            )}
          </div>
          
          <div className="mt-6 flex justify-end space-x-3">
            <button
              onClick={() => setShowAddForm(false)}
              className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              onClick={handleAddInvestment}
              className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
            >
              Add Investment
            </button>
          </div>
        </div>
      )}
      
      {/* Portfolio Summary */}
      <div className="mb-8 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-indigo-50 p-4 rounded-lg">
          <p className="text-sm text-indigo-600 font-medium">Current Portfolio Value</p>
          <p className="text-2xl font-bold">${calculateCurrentValue().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>
        </div>
        
        <div className="bg-green-50 p-4 rounded-lg">
          <p className="text-sm text-green-600 font-medium">Total Gain/Loss</p>
          <p className={`text-2xl font-bold ${calculateCurrentValue() - calculateInitialValue() >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            ${(calculateCurrentValue() - calculateInitialValue()).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            <span className="text-sm ml-1">
              ({((calculateCurrentValue() / calculateInitialValue() - 1) * 100).toFixed(2)}%)
            </span>
          </p>
        </div>
        
        <div className="bg-purple-50 p-4 rounded-lg">
          <p className="text-sm text-purple-600 font-medium">Number of Investments</p>
          <p className="text-2xl font-bold">{investments.length}</p>
        </div>
      </div>
      
      {/* Filter Controls */}
      <div className="mb-6 flex items-center space-x-2">
        <Filter className="h-5 w-5 text-gray-500" />
        <span className="text-sm font-medium text-gray-700">Filter:</span>
        <div className="flex space-x-2">
          <button
            onClick={() => setFilter('all')}
            className={`px-3 py-1 text-sm rounded-md ${filter === 'all' ? 'bg-indigo-100 text-indigo-700' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          >
            All
          </button>
          <button
            onClick={() => setFilter('stock')}
            className={`px-3 py-1 text-sm rounded-md ${filter === 'stock' ? 'bg-indigo-100 text-indigo-700' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          >
            Stocks
          </button>
          <button
            onClick={() => setFilter('mutual_fund')}
            className={`px-3 py-1 text-sm rounded-md ${filter === 'mutual_fund' ? 'bg-indigo-100 text-indigo-700' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          >
            Mutual Funds
          </button>
          <button
            onClick={() => setFilter('fixed_deposit')}
            className={`px-3 py-1 text-sm rounded-md ${filter === 'fixed_deposit' ? 'bg-indigo-100 text-indigo-700' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          >
            Fixed Deposits
          </button>
        </div>
      </div>
      
      {/* Investments Table */}
      <div className="overflow-x-auto mb-8">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Purchase Date</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gain/Loss</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expected Return</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {loading ? (
              <tr>
                <td colSpan={7} className="px-6 py-4 text-center">
                  <RefreshCw className="h-5 w-5 animate-spin mx-auto text-indigo-600" />
                </td>
              </tr>
            ) : filteredInvestments.length === 0 ? (
              <tr>
                <td colSpan={7} className="px-6 py-4 text-center text-gray-500">
                  No investments found. Add your first investment to get started.
                </td>
              </tr>
            ) : (
              filteredInvestments.map((inv) => {
                const currentValue = inv.type === 'fixed_deposit' 
                  ? inv.buyPrice 
                  : (inv.currentPrice || inv.buyPrice) * (inv.quantity || 1);
                  
                const initialValue = inv.type === 'fixed_deposit'
                  ? inv.buyPrice
                  : inv.buyPrice * (inv.quantity || 1);
                  
                const gainLoss = currentValue - initialValue;
                const gainLossPercent = (currentValue / initialValue - 1) * 100;
                
                return (
                  <tr key={inv.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="font-medium text-gray-900">{inv.name}</div>
                      {inv.ticker && <div className="text-sm text-gray-500">{inv.ticker}</div>}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                        ${inv.type === 'stock' ? 'bg-blue-100 text-blue-800' : 
                          inv.type === 'mutual_fund' ? 'bg-green-100 text-green-800' : 
                          'bg-yellow-100 text-yellow-800'}`}
                      >
                        {inv.type === 'stock' ? 'Stock' : 
                         inv.type === 'mutual_fund' ? 'Mutual Fund' : 
                         'Fixed Deposit'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(inv.purchaseDate).toLocaleDateString()}
                      {inv.maturityDate && (
                        <div className="text-xs">
                          Matures: {new Date(inv.maturityDate).toLocaleDateString()}
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      ${currentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      {(inv.type === 'stock' || inv.type === 'mutual_fund') && (
                        <div className="text-xs text-gray-500">
                          {inv.quantity} × ${(inv.currentPrice || inv.buyPrice).toFixed(2)}
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={gainLoss >= 0 ? 'text-green-600' : 'text-red-600'}>
                        ${gainLoss.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        <span className="text-xs ml-1">({gainLossPercent.toFixed(2)}%)</span>
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {(inv.expectedAnnualReturn * 100).toFixed(2)}%
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button
                        onClick={() => handleDeleteInvestment(inv.id)}
                        className="text-red-600 hover:text-red-900"
                      >
                        <Trash2 className="h-5 w-5" />
                      </button>
                    </td>
                  </tr>
                );
              })
            )}
          </tbody>
        </table>
      </div>
      
      {/* Future Value Projection */}
      <div className="bg-gray-50 p-6 rounded-lg">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Future Value Projection</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Projection Years</label>
            <div className="relative rounded-md shadow-sm">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Calendar className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="number"
                value={projectionYears}
                onChange={(e) => setProjectionYears(Number(e.target.value))}
                className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 pr-3 py-2 sm:text-sm border-gray-300 rounded-md"
                min="1"
                max="50"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Capital Gains Tax Rate (%)</label>
            <input
              type="number"
              value={taxRate * 100}
              onChange={(e) => setTaxRate(Number(e.target.value) / 100)}
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md"
              min="0"
              max="100"
              step="0.1"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Inflation Rate (%)</label>
            <input
              type="number"
              value={inflationRate * 100}
              onChange={(e) => setInflationRate(Number(e.target.value) / 100)}
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md"
              min="0"
              max="100"
              step="0.1"
            />
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Initial Investment</p>
            <p className="text-xl font-bold text-gray-900">
              ${calculateInitialValue().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Future Value (Before Tax)</p>
            <p className="text-xl font-bold text-indigo-600">
              ${calculateTotalFutureValue().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Capital Gains Tax</p>
            <p className="text-xl font-bold text-red-500">
              -${calculateTotalTax().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Net Future Value (After Tax)</p>
            <p className="text-xl font-bold text-green-600">
              ${(calculateTotalFutureValue() - calculateTotalTax()).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Real Value (After Inflation)</p>
            <p className="text-xl font-bold text-gray-900">
              ${calculateRealValue().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Total Return</p>
            <p className="text-xl font-bold text-indigo-600">
              {calculateTotalReturn().toFixed(2)}%
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Annualized Return</p>
            <p className="text-xl font-bold text-indigo-600">
              {calculateAnnualizedReturn().toFixed(2)}%
            </p>
          </div>
          
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <p className="text-sm text-gray-500">Tax Efficiency</p>
            <p className="text-xl font-bold text-gray-900">
              {calculateTaxEfficiency().toFixed(2)}%
            </p>
          </div>
        </div>
        
        <div className="mt-6 text-xs text-gray-500">
          <p>* Projections are estimates based on expected annual returns and may not reflect actual performance.</p>
          <p>* Tax calculations assume all investments are sold at the end of the projection period.</p>
        </div>
      </div>
    </div>
  );
};

export default PortfolioManager; 